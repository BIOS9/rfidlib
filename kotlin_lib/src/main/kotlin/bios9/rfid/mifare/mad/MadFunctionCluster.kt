package bios9.rfid.mifare.mad

enum class MadFunctionCluster(val functionClusterCode: UByte?, val description: String) {
  CARD_ADMINISTRATION(0x00u, "Card Administration"),
  MISCELLANEOUS_APPLICATIONS_01(0x01u, "Miscellaneous Applications"),
  MISCELLANEOUS_APPLICATIONS_02(0x02u, "Miscellaneous Applications"),
  MISCELLANEOUS_APPLICATIONS_03(0x03u, "Miscellaneous Applications"),
  MISCELLANEOUS_APPLICATIONS_04(0x04u, "Miscellaneous Applications"),
  MISCELLANEOUS_APPLICATIONS_05(0x05u, "Miscellaneous Applications"),
  MISCELLANEOUS_APPLICATIONS_06(0x06u, "Miscellaneous Applications"),
  MISCELLANEOUS_APPLICATIONS_07(0x07u, "Miscellaneous Applications"),
  AIRLINES(0x08u, "Airlines"),
  FERRY_TRAFFIC(0x09u, "Ferry Traffic"),
  RAILWAY_SERVICES(0x10u, "Railway Services"),
  MISCELLANEOUS_APPLICATIONS_11(0x11u, "Miscellaneous Applications"),
  TRANSPORT(0x12u, "Transport"),
  SECURITY_SOLUTIONS(0x14u, "Security Solutions"),
  CITY_TRAFFIC(0x18u, "City Traffic"),
  CZECH_RAILWAYS(0x19u, "Czech Railways"),
  BUS_SERVICES(0x20u, "Bus Services"),
  MULTI_MODAL_TRANSIT(0x21u, "Multi-Modal Transit"),
  TAXI(0x28u, "Taxi"),
  ROAD_TOLL(0x30u, "Road Toll"),
  GENERIC_TRANSPORT(0x31u, "Generic Transport"),
  COMPANY_SERVICES(0x38u, "Company Services"),
  CITY_CARD_SERVICES(0x40u, "City Card Services"),
  ACCESS_CONTROL_SECURITY_47(0x47u, "Access Control & Security"),
  ACCESS_CONTROL_SECURITY_48(0x48u, "Access Control & Security"),
  VIGIK(0x49u, "VIGIK"),
  MINISTRY_OF_DEFENCE_NL(0x4Au, "Ministry of Defence, Netherlands"),
  BOSCH_TELECOM_DE(0x4Bu, "Bosch Telecom, Germany"),
  EU_INSTITUTIONS(0x4Cu, "European Union Institutions"),
  SKI_TICKETING(0x50u, "Ski Ticketing"),
  ACCESS_CONTROL_SECURITY_51(0x51u, "Access Control & Security"),
  ACCESS_CONTROL_SECURITY_52(0x52u, "Access Control & Security"),
  ACCESS_CONTROL_SECURITY_53(0x53u, "Access Control & Security"),
  ACCESS_CONTROL_SECURITY_54(0x54u, "Access Control & Security"),
  SOAA_STANDARD_OFFLINE_ACCESS(0x55u, "SOAA Standard for Offline Access"),
  ACADEMIC_SERVICES(0x58u, "Academic Services"),
  FOOD(0x60u, "Food"),
  NON_FOOD_TRADE(0x68u, "Non-Food Trade"),
  HOTEL(0x70u, "Hotel"),
  LOYALTY(0x71u, "Loyalty"),
  AIRPORT_SERVICES(0x75u, "Airport Services"),
  CAR_RENTAL(0x78u, "Car Rental"),
  DUTCH_GOVERNMENT(0x79u, "Dutch Government"),
  ADMINISTRATION_SERVICES(0x80u, "Administration Services"),
  ELECTRONIC_PURSE(0x88u, "Electronic Purse"),
  TELEVISION(0x90u, "Television"),
  CRUISE_SHIP(0x91u, "Cruise Ship"),
  IOPTA(0x95u, "IOPTA"),
  METERING(0x97u, "Metering"),
  TELEPHONE(0x98u, "Telephone"),
  HEALTH_SERVICES(0xA0u, "Health Services"),
  WAREHOUSE(0xA8u, "Warehouse"),
  ELECTRONIC_TRADE(0xB0u, "Electronic Trade"),
  BANKING(0xB8u, "Banking"),
  ENTERTAINMENT_SPORTS(0xC0u, "Entertainment & Sports"),
  CAR_PARKING(0xC8u, "Car Parking"),
  FLEET_MANAGEMENT(0xC9u, "Fleet Management"),
  FUEL_GASOLINE(0xD0u, "Fuel, Gasoline"),
  INFO_SERVICES(0xD8u, "Info Services"),
  PRESS(0xE0u, "Press"),
  NFC_FORUM(0xE1u, "NFC Forum"),
  COMPUTER(0xE8u, "Computer"),
  MAIL(0xF0u, "Mail"),
  MISCELLANEOUS_APPLICATIONS_F8(0xF8u, "Miscellaneous Applications"),
  MISCELLANEOUS_APPLICATIONS_F9(0xF9u, "Miscellaneous Applications"),
  MISCELLANEOUS_APPLICATIONS_FA(0xFAu, "Miscellaneous Applications"),
  MISCELLANEOUS_APPLICATIONS_FB(0xFBu, "Miscellaneous Applications"),
  MISCELLANEOUS_APPLICATIONS_FC(0xFCu, "Miscellaneous Applications"),
  MISCELLANEOUS_APPLICATIONS_FD(0xFDu, "Miscellaneous Applications"),
  MISCELLANEOUS_APPLICATIONS_FE(0xFEu, "Miscellaneous Applications"),
  MISCELLANEOUS_APPLICATIONS_FF(0xFFu, "Miscellaneous Applications"),
  RESERVED(null, "Reserved Function");

  companion object {
    private val map = entries.associateBy(MadFunctionCluster::functionClusterCode)

    fun fromFunctionClusterCode(code: UByte): MadFunctionCluster = map[code] ?: RESERVED
  }
}
