package bios9.rfid.gallagher

import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Test

@OptIn(ExperimentalUnsignedTypes::class)
class Crc16CadTest {
    @Test
    fun `crc should return correct value`() {
        // Tests based on https://github.com/megabug/gallagher-research/blob/master/formats/cad.md
        val testCases = listOf(
            ubyteArrayOf(0x00u) to 0x127Bu,

            // Examples from real card and the GitHub page.
            ubyteArrayOf(0x00u, 0x01u, 0xC1u, 0x33u, 0x70u, 0xFDu, 0x13u, 0x38u, 0x0Du, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u) to 0x1B58u,
            ubyteArrayOf(0x00u, 0x01u, 0x00u, 0x0Du, 0xE0u, 0xF0u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u) to 0x108Eu,

            // Randomly generated and run through python example on GitHub.
            ubyteArrayOf(0x00u, 0x01u, 0xC1u, 0x33u, 0x70u, 0xFDu, 0x13u, 0x38u, 0x0Du, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u) to 0x1B58u,
            ubyteArrayOf(0xBAu, 0x7Bu, 0xA7u, 0x93u, 0x3Cu, 0x8Cu, 0x02u, 0x76u, 0xC0u, 0x1Cu, 0xAFu, 0x92u, 0x44u, 0xCBu, 0x96u, 0x59u, 0x5Eu, 0x6Bu, 0xF3u, 0xA1u, 0x63u, 0xEBu, 0xFBu, 0x17u, 0x82u, 0x96u, 0xD8u, 0xBEu, 0xAEu, 0xD9u, 0xFFu, 0x15u, 0x5Du, 0xD0u, 0x43u, 0xA9u, 0xF3u, 0xECu, 0x0Bu, 0x76u, 0xE9u, 0xC5u, 0x40u, 0x2Au, 0x0Cu, 0x8Du) to 0x199Eu,
            ubyteArrayOf(0x99u, 0x08u, 0x8Cu, 0x9Eu, 0xEAu, 0xAEu, 0x70u, 0xB7u, 0x19u, 0xCEu, 0x69u, 0x16u, 0x23u, 0x1Du, 0x53u, 0x3Du, 0xB6u, 0x04u, 0xECu, 0xF3u, 0x02u, 0x8Au, 0xFEu, 0x97u, 0xB9u, 0x21u, 0x23u, 0xA1u, 0xD1u, 0x2Eu, 0x5Fu, 0x98u, 0x35u, 0xB9u, 0xDFu, 0x70u, 0xEBu, 0x01u, 0x79u, 0x5Cu, 0xE6u, 0xDDu, 0x44u, 0x5Au, 0x47u, 0x97u) to 0x0976u,
            ubyteArrayOf(0xA1u, 0xD5u, 0xC8u, 0x06u, 0xCEu, 0xE8u, 0xE1u, 0x10u, 0x36u, 0xFDu, 0x54u, 0x9Au, 0x45u, 0x6Cu, 0xCCu, 0x02u, 0x9Bu, 0x15u, 0xA6u, 0xE6u, 0x1Du, 0x0Fu, 0xF6u, 0x44u, 0xEBu, 0x59u, 0x03u, 0x3Cu, 0x47u, 0x57u, 0x14u, 0xA9u, 0x7Cu, 0x88u, 0x0Au, 0x54u, 0x4Fu, 0x96u, 0x83u, 0x78u, 0x46u, 0x5Au, 0xB7u, 0xDCu, 0x4Cu, 0xBFu) to 0x1E40u,
            ubyteArrayOf(0x03u, 0xB4u, 0xEDu, 0xEAu, 0x8Bu, 0x71u, 0xFDu, 0x44u, 0x56u, 0x40u, 0xADu, 0xF4u, 0xB6u, 0xB4u, 0xF5u, 0xDCu, 0x0Cu, 0x04u, 0xBDu, 0x5Du, 0x7Bu, 0x81u, 0x0Au, 0x0Au, 0x3Du, 0x73u, 0xAFu, 0xEFu, 0xD6u, 0x60u, 0xCFu, 0xFAu, 0x86u, 0x17u, 0xFEu, 0x65u, 0x80u, 0x20u, 0xF4u, 0x58u, 0x25u, 0x7Bu, 0xDDu, 0x29u, 0x53u, 0x65u) to 0x036Eu,
            ubyteArrayOf(0xF8u, 0xC5u, 0x75u, 0x36u, 0x3Au, 0x5Eu, 0x31u, 0x84u, 0xFEu, 0x9Bu, 0x93u, 0x39u, 0x0Du, 0x11u, 0x7Bu, 0x02u, 0xC9u, 0x09u, 0xFEu, 0x63u, 0x58u, 0x24u, 0x07u, 0x33u, 0x83u, 0xFEu, 0x7Eu, 0x2Du, 0xCEu, 0xD4u, 0xC8u, 0x50u, 0x07u, 0x44u, 0x8Eu, 0xA6u, 0xB1u, 0x72u, 0x05u, 0x81u, 0x7Du, 0xE9u, 0xCAu, 0x3Fu, 0xAFu, 0xE9u) to 0x026Du,
            ubyteArrayOf(0xD9u, 0x5Cu, 0xCFu, 0x5Cu, 0x58u, 0x2Fu, 0x4Du, 0x2Du, 0xF7u, 0xC9u, 0xE3u, 0x8Eu, 0x0Eu, 0xA0u, 0x3Eu, 0x3Bu, 0x3Bu, 0x9Fu, 0x8Bu, 0x9Cu, 0x55u, 0x13u, 0xC2u, 0xF0u, 0x76u, 0xA1u, 0x54u, 0x96u, 0x53u, 0x04u, 0xF6u, 0xF9u, 0x78u, 0xAFu, 0x7Au, 0x9Eu, 0xE9u, 0x3Du, 0x3Fu, 0xBFu, 0x69u, 0xA3u, 0x2Bu, 0x0Cu, 0x4Bu, 0x81u) to 0x1B6Cu,
            ubyteArrayOf(0xE9u, 0xA3u, 0xCDu, 0x12u, 0xEDu, 0x2Fu, 0x80u, 0x0Cu, 0x2Cu, 0x76u, 0x52u, 0x0Au, 0x34u, 0x65u, 0xFCu, 0x3Fu, 0xF7u, 0xC3u, 0x3Eu, 0xA5u, 0xEBu, 0xDEu, 0x1Bu, 0x7Du, 0xEEu, 0x84u, 0x8Fu, 0xC6u, 0x3Eu, 0x6Du, 0xA6u, 0x28u, 0x3Cu, 0x92u, 0x57u, 0xF8u, 0xFFu, 0xA0u, 0x82u, 0x15u, 0x11u, 0x59u, 0x61u, 0x6Bu, 0x2Du, 0xD4u) to 0x1DE0u,
            ubyteArrayOf(0x60u, 0xE1u, 0x02u, 0x3Bu, 0xACu, 0x65u, 0x5Eu, 0xADu, 0x01u, 0x77u, 0x24u, 0xA8u, 0x96u, 0x9Au, 0xCDu, 0x0Du, 0xA2u, 0x8Au, 0x14u, 0xFCu, 0x4Bu, 0x23u, 0x07u, 0xE5u, 0x4Au, 0x16u, 0xD0u, 0x64u, 0x52u, 0xFFu, 0x10u, 0x4Eu, 0x96u, 0x70u, 0x08u, 0xC4u, 0x6Cu, 0xF8u, 0x84u, 0xCDu, 0xFCu, 0x8Cu, 0xB6u, 0xB4u, 0x10u, 0xE1u) to 0x04E2u,
            ubyteArrayOf(0x20u, 0x08u, 0x47u, 0x8Au, 0x53u, 0x20u, 0x49u, 0x29u, 0x50u, 0xA9u, 0x62u, 0x57u, 0x17u, 0x16u, 0x67u, 0x89u, 0xC4u, 0x37u, 0xB0u, 0x96u, 0x45u, 0x63u, 0x42u, 0xC8u, 0xCDu, 0xEBu, 0xCEu, 0x00u, 0x71u, 0x26u, 0xFAu, 0xDDu, 0xF2u, 0x3Fu, 0xE4u, 0xB3u, 0x5Cu, 0xD6u, 0x55u, 0x71u, 0x7Cu, 0x8Au, 0xECu, 0x06u, 0x37u, 0x90u) to 0x0880u,
            ubyteArrayOf(0x9Du, 0xB8u, 0x41u, 0x10u, 0x53u, 0x42u, 0x4Bu, 0xAAu, 0xDDu, 0x3Cu, 0x67u, 0x21u, 0x22u, 0xA1u, 0xD7u, 0x1Du, 0xFBu, 0x17u, 0x10u, 0x2Fu, 0x47u, 0x11u, 0x04u, 0x37u, 0x3Bu, 0xDBu, 0x41u, 0x9Du, 0x71u, 0xB9u, 0xCAu, 0x4Du, 0xC3u, 0x2Fu, 0xE0u, 0x52u, 0xC4u, 0xF1u, 0x2Bu, 0xBAu, 0x5Fu, 0xE4u, 0xCFu, 0xB6u, 0x0Au, 0xDBu) to 0x064Au
        )

        for ((data, expectedCrc) in testCases) {
            assertEquals(expectedCrc.toUShort(), Crc16Cad.compute(data))
        }
    }
}